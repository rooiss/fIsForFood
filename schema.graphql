type User {
    id: ID!
    name: String!
    recipes: [Recipe!]!
    activity: [Activity!]!
}

type Activity {
    content: String!
}

type Recipe {
    id: ID!
    name: String!
    image: String!
    video: String
    ingredients: [Ingredients!]!
    difficulty(rating: Difficulty): 
    servings: Int!
    """ 
    in minutes
    """
    duration: Int! 
    steps: [RecipeStep!]!
    comments: [RecipeComment!]!
    categories: [String!]!
    chef: User!
}

type RecipeComment {
    id: ID!
    user: User!
    content: String!
}

type Ingredient {
    quantity: String!
    name: String!
}

type RecipeStep {
    # does the recipe step need the recipe Id as well?
    id: ID!
    content: String!
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
} 
type Query {
    recipes: [Recipe]
    recipe($recipeId: String!): Recipe
    comments: # should there be a seperate object for user comments?
    categories():
    ingredients():
 }

type Mutation {
    login(email: String, password: ): String
    createRecipe(): Recipe
    createRecipeStep(): RecipeStep
    updateRecipe(): Recipe
    uploadImage($filename: String!, $id: ID!): String!
    uploadVideo($filename: String!, $id: ID!): String!
    deleteRecipe(recipeId: ID!, )
    createUser($id: ID!, name: String!, email: String!): User!
    addComment(commentId: ID!, ): 
}